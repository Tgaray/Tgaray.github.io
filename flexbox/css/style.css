html,
body,
ul,
ol {
  margin: 0;
  padding: 0;
}

/***
The MIT License (MIT)

Copyright (c) 2014 Therese Seares <therese.seares@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/
/*****************************************************
    Flex container mixins at a glance:
        display-flex
        flex-direction
        flex-wrap
        flex-flow
        justify-content
        align-items
        align-content
*****************************************************/
/***
    DISPLAY-FLEX
    Defines a flex container.
    Enables a flex context for all its direct children.
    $flex-type: flex | inline-flex
***/
/***
    FLEX-DIRECTION
    Defines main axis and the direction flex items are
    layed-out in the flex container.
    $direction: row | row-reverse | column | column-reverse
***/
/***
    FLEX-WRAP
    Determines whether the container should wrap overflowing
    flex items or not. Also determines direction if wrap is
    enabled.
    $wrap: nowrap | wrap | wrap-reverse
***/
/***
    FLEX-FLOW
    A shorthand for flex-direction and flex-wrap
***/
/***
    JUSTIFY-CONTENT
    Define what alignment flex items should use relative to the main axis.
    $alignment: flex-start | flex-end | center | space-between | space-around
***/
/***
    ALIGN-ITEMS
    Define what alignment flex items should use relative to cross axis.
    $alignment: flex-start | flex-end | center | baseline | stretch
***/
/***
    ALIGN-CONTENT
    Define what alignment flex items should use relative to cross axis when flex items create multiple lines
    $alignment: flex-start | flex-end | center | space-between | space-around | stretch
***/
/**************************************************************************
    Flex item mixins at a glance:
        flex-grow
        flex-shrink
        flex-basis
        flex
        align-self
        *order: not included since it can be used right out of the box
**************************************************************************/
/***
    FLEX-GROW
    Defines how a flex item should grow relative to other items when necessary
    $proportion: 0 | <number>
    <number> negative numbers are invalid
***/
/***
    FLEX-SHRINK
    Defines how a flex item should shrink relative to other items when necessary
    $proportion: 1 | <number>
    <number> negative numbers are invalid
***/
/***
    FLEX-BASIS
    Defines default size of an item before remaining space is distributed
    $width: auto | <width>
***/
/***
    FLEX
    Shorthand for flex-grow, flex-shrink and flex-basis
    Optional: flex-shrink, flex-basis
    $length: 0 1 auto | $grow $shrink $basis
***/
/***
    ALIGN-SELF
    Defines alignment for a flex item, overriding its flex container's align-items definition
    $alignment: auto | flex-start | flex-end | center | baseline | stretch
***/
body {
  font-family: "Segoe UI", 'Proxima Nova', Arial, sans-serif;
  font-size: 15px;
  line-height: 1.6;
  color: #2c3235;
  background-color: #f7f5f0;
}

h2 {
  color: grey;
}

p {
  color: grey;
}

.container {
  margin-right: auto;
  margin-left: auto;
  padding-left: 15px;
  padding-right: 15px;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: flex;
  -webkit-justify-content: space-between;
  -moz-justify-content: space-between;
  -ms-justify-content: space-between;
  justify-content: space-between;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}

@media (min-width: 1200px) {
  .container {
    width: 1170px;
    background-color: orange;
  }
  .embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    width: 1140px;
    margin: 0 auto;
  }
}

@media (max-width: 1199px) and (min-width: 992px) {
  .container {
    width: 970px;
    background-color: yellow;
  }
  .embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    width: 940px;
    margin: 0 auto;
  }
}

@media (max-width: 991px) and (min-width: 768px) {
  .container {
    width: 750px;
    background-color: lightgreen;
  }
  .embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    width: 720px;
    margin: 0 auto;
  }
}

@media (max-width: 767px) {
  article {
    margin: 0 2.5%;
    min-width: 95%;
    text-align: center;
  }
  .embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    width: 100%;
    margin: 0 auto;
  }
}

.section {
  position: relative;
  text-align: center;
  padding: 50px 0;
  background: #fff;
}

.section-colored {
  background-color: teal;
}

article {
  margin: 2.5% 2.5%;
  width: 45%;
}

.embed-container embed,
.embed-container iframe,
.embed-container object {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

img {
  max-width: 100%;
  height: auto;
}

.click-to-toggle {
  cursor: pointer;
}
